fluidRow(
actionButton("Refresh_call", "Refresh", icon = icon("refresh"), width = 120)),
sliderInput( inputId = "CyclesMerge",
label = "Time filter (1=include all)",
min = 0,
max = 1,
value= c(0,1),
step =.01)
#,
#downloadButton("downloadXLS", "Download XLS", icon = icon("download"))
),
dashboardBody(
tabItems(
#HOT WATER BATTERY
tabItem(tabName = "HWB",
fluidRow(box(
column(
selectInput("metric", "Metrics for 24h plot:", choices = c("HWB_TSB","HWB_TSM","HWB_TST","HWB_SOC_pct"),
selected =  c("HWB_TSB","HWB_TSM","HWB_TST","HWB_SOC_pct"),
multiple = TRUE),width = 5),
# column(
#   selectInput("HWB_TSFS", "Metrics for Hydronics plot:", choices = c("HS_TS4","HS_TS5","FS3_FS"),
#               selected =  c("HS_TS4","HS_TS5","FS3_FS"),
#               multiple = TRUE),
# width = 5 ),
column(
selectInput("HWB_PM", "Metrics for Power usage plot:", choices = c("PM3_PF","PM3_I","PM3_V","PM3_PWH","PM3_PVA","PM3_FR"),
selected =  c("PM3_PVA"),
multiple = TRUE),
width = 5 ),
height =100, width = 12)),
fluidRow(box(withSpinner(plotlyOutput("HWB_top", height = 350)),width = 12)),
fluidRow(box(withSpinner(plotlyOutput("HWB_bottom", height = 350)),width = 12)),
fluidRow(box(withSpinner(plotlyOutput("HWB_bottomid", height = 350)),width = 12)),
fluidRow(box(withSpinner(plotlyOutput("HWB_bottomer", height = 350)),width = 12))
),
#SPACE HEATING BATTERY
tabItem(tabName = "SHB",
fluidRow(box(
column(
selectInput("SHB_TM", "SOC Metrics:", choices = c("CHB_TS1_AVG","CHB_TS2_AVG","CHB_TS3_AVG","CHB_TS4_AVG","CHB_TS5_AVG","CHB_SOC_pct"),
selected =  c("CHB_TS1_AVG","CHB_TS2_AVG","CHB_TS3_AVG","CHB_TS4_AVG","CHB_TS5_AVG","CHB_SOC_pct"),
multiple = TRUE),width = 5),
column(
selectInput("SHB_BM", "Metrics for Hydronics plot:", choices = c("HS_TS10","HS_TS11","HS_TS12","FS5_FS"),
selected =   c("HS_TS10","HS_TS11","HS_TS12","FS5_FS"),
multiple = TRUE),
width = 5 ),height =100, width = 12)),
fluidRow(box(withSpinner(plotlyOutput("SHB_top", height = 350)),width = 12)),
fluidRow(box(withSpinner(plotlyOutput("SHB_bottom", height = 350)),width = 12)),
fluidRow(box(withSpinner(plotlyOutput("SHB_bottomer", height = 350)),width = 12))
),
#OPERATIONAL MODE
tabItem(tabName = "OP_MO",
box(title = "Operation Mode", status = "primary", height = "1200",width = "12",solidHeader = T,
DT::dataTableOutput("OP_mode_table"),style = "height:1000px; overflow-y: scroll; overflow-x: scroll;")),
#Heat load
tabItem(tabName = "Heat_Load",
fluidRow(box(withSpinner(plotlyOutput("HeatLoad", height = 450)),width = 12)),
fluidRow(box(withSpinner(plotlyOutput("PowerPlot", height = 250)),width = 12)),
fluidRow(box(withSpinner(plotlyOutput("SOCPlot", height = 250)),width = 12))
)
)
)
)
runApp('directory')
runApp('directory')
shiny::runApp('C:/Users/griffin.ernest/OneDrive - Sunamp/Documents - Data Analysis/RShiny apps/LDESS Real Time DB/LDESS_RT_DB/LDESS_RT_DB/directory')
runApp('directory')
runApp('directory')
runApp('directory')
runApp('directory')
runApp('directory')
runApp('directory')
shiny::runApp('directory')
library(curl)
library(jsonlite)
library(tidyr)
library(readxl)
library(shinydashboard)
library(shiny)
library(lubridate)
library(ggthemes)
library(ggplot2)
library(dplyr)
library(RSQLite)
library(plotly)
library(shinyauthr)
library(shinycssloaders)
library(openxlsx)
library(DT)
library(DBI)
#db information:
db <- 'ldess_db'
host_db <- '172.187.185.55'  # e.g., 'ec2-54-83-201-96.compute-1.amazonaws.com'
db_port <- '5432'  # Specify the port (e.g., 5432)
db_user <- 'ldess_hist_dashboard'
db_password <- 'SIE09375SDKJF'
schema_name <- input$EXTEND_ID %>% tolower()
#schema_name <- "ext0007" #FOR TESTING
table_name <- "sensor_logs"
enddate <- as.character(Sys.Date())
tartdate <- as.POSIXct("2024-06-10",tz = 'UTC')
#connect, define and run query
con <- dbConnect(RPostgres::Postgres(),
dbname = db,
host = host_db,
port = db_port,
user = db_user,
password = db_password)
#db information:
db <- 'ldess_db'
host_db <- 'localhost'  # e.g., 'ec2-54-83-201-96.compute-1.amazonaws.com'
db_port <- '5432'  # Specify the port (e.g., 5432)
db_user <- 'postgres'
db_password <- 'Maplephone5'
schema_name <- "EXT0007" %>% tolower()
#schema_name <- "ext0007" #FOR TESTING
table_name <- "sensor_logs"
#connect, define and run query
con <- dbConnect(RPostgres::Postgres(),
dbname = db,
host = host_db,
port = db_port,
user = db_user,
password = db_password)
query <- paste0("SELECT * FROM ",schema_name,".",table_name,";")
result <- dbGetQuery(con, query)
dbDisconnect(con) #disconnect
library (DB)
#db information:
db <- 'ldess_db'
host_db <- 'localhost'  # e.g., 'ec2-54-83-201-96.compute-1.amazonaws.com'
db_port <- '5432'  # Specify the port (e.g., 5432)
db_user <- 'postgres'
db_password <- 'Maplephone5'
schema_name <- "EXT0007" %>% tolower()
#schema_name <- "ext0007" #FOR TESTING
table_name <- "sensor_logs"
#connect, define and run query
con <- dbConnect(RPostgres::Postgres(),
dbname = db,
host = host_db,
port = db_port,
user = db_user,
password = db_password)
query <- paste0("SELECT * FROM ",schema_name,".",table_name,";")
result <- dbGetQuery(con, query)
dbDisconnect(con) #disconnect
library (DB)
library (DBI)
#db information:
db <- 'ldess_db'
host_db <- 'localhost'  # e.g., 'ec2-54-83-201-96.compute-1.amazonaws.com'
db_port <- '5432'  # Specify the port (e.g., 5432)
db_user <- 'postgres'
db_password <- 'Maplephone5'
schema_name <- "EXT0007" %>% tolower()
#schema_name <- "ext0007" #FOR TESTING
table_name <- "sensor_logs"
library(dplyr)
#db information:
db <- 'ldess_db'
host_db <- 'localhost'  # e.g., 'ec2-54-83-201-96.compute-1.amazonaws.com'
db_port <- '5432'  # Specify the port (e.g., 5432)
db_user <- 'postgres'
db_password <- 'Maplephone5'
schema_name <- "EXT0007" %>% tolower()
#schema_name <- "ext0007" #FOR TESTING
table_name <- "sensor_logs"
#connect, define and run query
con <- dbConnect(RPostgres::Postgres(),
dbname = db,
host = host_db,
port = db_port,
user = db_user,
password = db_password)
query <- paste0("SELECT * FROM ",schema_name,".",table_name,";")
result <- dbGetQuery(con, query)
dbDisconnect(con) #disconnect
View(result)
unique(result$DateTime)
unique( date(as.POSIXct(result$DateTime))
)
unique( date(as.POSIXct(result$DateTime)))
as.POSIXct(result$DateTime
)
date(as.POSIXct(result$DateTime))
unique( as.POSIXct(result$DateTime) %>% date())
date()
unique( as.POSIXct(result$DateTime) %>% format(,"YYYY-MM-DD"))
unique( as.POSIXct(result$DateTime) %>% format("YYYY-MM-DD"))
unique( as.POSIXct(result$DateTime) %>% format("%YYYY-%MM-%DD"))
unique( as.POSIXct(result$DateTime) %>% format("%Y-%M-%D"))
unique( as.POSIXct(result$DateTime) %>% format("%Y-%m-%D"))
unique( as.POSIXct(result$DateTime) %>% format("%Y-%m-%d"))
unique( as.POSIXct(result$DateTime) %>% format("%Y-%m-%d"))
unique( as.POSIXct(result$DateTime) %>% format("%Y-%m-%d")) %>% length()
library (DBI)
library(dplyr)
#db information:
db <- 'ldess_db'
host_db <- 'localhost'  # e.g., 'ec2-54-83-201-96.compute-1.amazonaws.com'
db_port <- '5432'  # Specify the port (e.g., 5432)
db_user <- 'postgres'
db_password <- 'Maplephone5'
schema_name <- "EXT0007" %>% tolower()
#schema_name <- "ext0007" #FOR TESTING
table_name <- "sensor_logs"
#query information
#enddate <- input$dates[2] %>% as.character()
#startdate <- input$dates[1] %>% as.character()
#enddate <- as.character(Sys.Date())
#startdate <- as.POSIXct("2024-06-10",tz = 'UTC')
#connect, define and run query
con <- dbConnect(RPostgres::Postgres(),
dbname = db,
host = host_db,
port = db_port,
user = db_user,
password = db_password)
query <- paste0("SELECT * FROM ",schema_name,".",table_name,";")
result <- dbGetQuery(con, query)
dbDisconnect(con) #disconnect
unique( as.POSIXct(result$DateTime) %>% format("%Y-%m-%d")) %>% length()
#db information:
db <- 'ldess_db'
host_db <- 'localhost'  # e.g., 'ec2-54-83-201-96.compute-1.amazonaws.com'
db_port <- '5432'  # Specify the port (e.g., 5432)
db_user <- 'postgres'
db_password <- 'Maplephone5'
schema_name <- "EXT0007" %>% tolower()
#schema_name <- "ext0007" #FOR TESTING
table_name <- "sensor_logs"
#query information
#enddate <- input$dates[2] %>% as.character()
#startdate <- input$dates[1] %>% as.character()
#enddate <- as.character(Sys.Date())
#startdate <- as.POSIXct("2024-06-10",tz = 'UTC')
#connect, define and run query
con <- dbConnect(RPostgres::Postgres(),
dbname = db,
host = host_db,
port = db_port,
user = db_user,
password = db_password)
query <- paste0("SELECT * FROM ",schema_name,".",table_name,";")
result <- dbGetQuery(con, query)
dbDisconnect(con) #disconnect
unique( as.POSIXct(result$DateTime) %>% format("%Y-%m-%d")) %>% length()
library (DBI)
library(dplyr)
#db information:
db <- 'ldess_db'
host_db <- 'localhost'  # e.g., 'ec2-54-83-201-96.compute-1.amazonaws.com'
db_port <- '5432'  # Specify the port (e.g., 5432)
db_user <- 'postgres'
db_password <- 'Maplephone5'
schema_name <- "EXT0007" %>% tolower()
#schema_name <- "ext0007" #FOR TESTING
table_name <- "sensor_logs"
#query information
#enddate <- input$dates[2] %>% as.character()
#startdate <- input$dates[1] %>% as.character()
#enddate <- as.character(Sys.Date())
#startdate <- as.POSIXct("2024-06-10",tz = 'UTC')
#connect, define and run query
con <- dbConnect(RPostgres::Postgres(),
dbname = db,
host = host_db,
port = db_port,
user = db_user,
password = db_password)
query <- paste0("SELECT * FROM ",schema_name,".",table_name,";")
result <- dbGetQuery(con, query)
dbDisconnect(con) #disconnect
unique( as.POSIXct(result$DateTime) %>% format("%Y-%m-%d")) %>% length()
library (DBI)
library(dplyr)
#db information:
db <- 'ldess_db'
host_db <- 'localhost'  # e.g., 'ec2-54-83-201-96.compute-1.amazonaws.com'
db_port <- '5432'  # Specify the port (e.g., 5432)
db_user <- 'postgres'
db_password <- 'Maplephone5'
schema_name <- "EXT0007" %>% tolower()
#schema_name <- "ext0007" #FOR TESTING
table_name <- "sensor_logs"
#query information
#enddate <- input$dates[2] %>% as.character()
#startdate <- input$dates[1] %>% as.character()
#enddate <- as.character(Sys.Date())
#startdate <- as.POSIXct("2024-06-10",tz = 'UTC')
#connect, define and run query
con <- dbConnect(RPostgres::Postgres(),
dbname = db,
host = host_db,
port = db_port,
user = db_user,
password = db_password)
query <- paste0("SELECT * FROM ",schema_name,".",table_name,";")
result <- dbGetQuery(con, query)
dbDisconnect(con) #disconnect
unique( as.POSIXct(result$DateTime) %>% format("%Y-%m-%d")) %>% length()
library (DBI)
library(dplyr)
#db information:
db <- 'ldess_db'
host_db <- 'localhost'  # e.g., 'ec2-54-83-201-96.compute-1.amazonaws.com'
db_port <- '5432'  # Specify the port (e.g., 5432)
db_user <- 'postgres'
db_password <- 'Maplephone5'
schema_name <- "EXT0007" %>% tolower()
#schema_name <- "ext0007" #FOR TESTING
table_name <- "sensor_logs"
#query information
#enddate <- input$dates[2] %>% as.character()
#startdate <- input$dates[1] %>% as.character()
#enddate <- as.character(Sys.Date())
#startdate <- as.POSIXct("2024-06-10",tz = 'UTC')
#connect, define and run query
con <- dbConnect(RPostgres::Postgres(),
dbname = db,
host = host_db,
port = db_port,
user = db_user,
password = db_password)
query <- paste0("SELECT * FROM ",schema_name,".",table_name,";")
result <- dbGetQuery(con, query)
dbDisconnect(con) #disconnect
unique( as.POSIXct(result$DateTime) %>% format("%Y-%m-%d")) %>% length()
#db information:
db <- 'ldess_db'
host_db <- 'localhost'  # e.g., 'ec2-54-83-201-96.compute-1.amazonaws.com'
db_port <- '5432'  # Specify the port (e.g., 5432)
db_user <- 'postgres'
db_password <- 'Maplephone5'
schema_name <- "EXT0007" %>% tolower()
#schema_name <- "ext0007" #FOR TESTING
table_name <- "sensor_logs"
#connect, define and run query
con <- dbConnect(RPostgres::Postgres(),
dbname = db,
host = host_db,
port = db_port,
user = db_user,
password = db_password)
query <- paste0("SELECT * FROM ",schema_name,".",table_name,";")
result <- dbGetQuery(con, query)
dbDisconnect(con) #disconnect
unique( as.POSIXct(result$DateTime) %>% format("%Y-%m-%d"))
library (DBI)
library(dplyr)
#db information:
db <- 'ldess_db'
host_db <- 'localhost'  # e.g., 'ec2-54-83-201-96.compute-1.amazonaws.com'
db_port <- '5432'  # Specify the port (e.g., 5432)
db_user <- 'postgres'
db_password <- 'Maplephone5'
schema_name <- "EXT0007" %>% tolower()
#schema_name <- "ext0007" #FOR TESTING
table_name <- "sensor_logs"
#query information
#enddate <- input$dates[2] %>% as.character()
#startdate <- input$dates[1] %>% as.character()
#enddate <- as.character(Sys.Date())
#startdate <- as.POSIXct("2024-06-10",tz = 'UTC')
#connect, define and run query
con <- dbConnect(RPostgres::Postgres(),
dbname = db,
host = host_db,
port = db_port,
user = db_user,
password = db_password)
query <- paste0("SELECT * FROM ",schema_name,".",table_name,";")
result <- dbGetQuery(con, query)
dbDisconnect(con) #disconnect
unique( as.POSIXct(result$DateTime) %>% format("%Y-%m-%d")) %>% length()
library (DBI)
library(dplyr)
#db information:
db <- 'ldess_db'
host_db <- 'localhost'  # e.g., 'ec2-54-83-201-96.compute-1.amazonaws.com'
db_port <- '5432'  # Specify the port (e.g., 5432)
db_user <- 'postgres'
db_password <- 'Maplephone5'
schema_name <- "EXT0007" %>% tolower()
#schema_name <- "ext0007" #FOR TESTING
table_name <- "sensor_logs"
#query information
#enddate <- input$dates[2] %>% as.character()
#startdate <- input$dates[1] %>% as.character()
#enddate <- as.character(Sys.Date())
#startdate <- as.POSIXct("2024-06-10",tz = 'UTC')
#connect, define and run query
con <- dbConnect(RPostgres::Postgres(),
dbname = db,
host = host_db,
port = db_port,
user = db_user,
password = db_password)
query <- paste0("SELECT * FROM ",schema_name,".",table_name,";")
result <- dbGetQuery(con, query)
dbDisconnect(con) #disconnect
unique( as.POSIXct(result$DateTime) %>% format("%Y-%m-%d")) %>% length()
db <- 'ldess_db'
host_db <- 'localhost'  # e.g., 'ec2-54-83-201-96.compute-1.amazonaws.com'
db_port <- '5432'  # Specify the port (e.g., 5432)
db_user <- 'postgres'
db_password <- 'Maplephone5'
schema_name <- "EXT0007" %>% tolower()
#schema_name <- "ext0007" #FOR TESTING
table_name <- "sensor_logs"
#query information
#enddate <- input$dates[2] %>% as.character()
#startdate <- input$dates[1] %>% as.character()
#enddate <- as.character(Sys.Date())
#startdate <- as.POSIXct("2024-06-10",tz = 'UTC')
#connect, define and run query
con <- dbConnect(RPostgres::Postgres(),
dbname = db,
host = host_db,
port = db_port,
user = db_user,
password = db_password)
query <- paste0("SELECT * FROM ",schema_name,".",table_name,";")
result <- dbGetQuery(con, query)
dbDisconnect(con) #disconnect
unique( as.POSIXct(result$DateTime) %>% format("%Y-%m-%d")) %>% length()
library (DBI)
library(dplyr)
#db information:
db <- 'ldess_db'
host_db <- 'localhost'  # e.g., 'ec2-54-83-201-96.compute-1.amazonaws.com'
db_port <- '5432'  # Specify the port (e.g., 5432)
db_user <- 'postgres'
db_password <- 'Maplephone5'
schema_name <- "EXT0007" %>% tolower()
#schema_name <- "ext0007" #FOR TESTING
table_name <- "sensor_logs"
#query information
#enddate <- input$dates[2] %>% as.character()
#startdate <- input$dates[1] %>% as.character()
#enddate <- as.character(Sys.Date())
#startdate <- as.POSIXct("2024-06-10",tz = 'UTC')
#connect, define and run query
con <- dbConnect(RPostgres::Postgres(),
dbname = db,
host = host_db,
port = db_port,
user = db_user,
password = db_password)
query <- paste0("SELECT * FROM ",schema_name,".",table_name,";")
result <- dbGetQuery(con, query)
dbDisconnect(con) #disconnect
unique( as.POSIXct(result$DateTime) %>% format("%Y-%m-%d")) %>% length()
library (DBI)
library(dplyr)
#db information:
db <- 'ldess_db'
host_db <- 'localhost'  # e.g., 'ec2-54-83-201-96.compute-1.amazonaws.com'
db_port <- '5432'  # Specify the port (e.g., 5432)
db_user <- 'postgres'
db_password <- 'Maplephone5'
schema_name <- "EXT0007" %>% tolower()
#schema_name <- "ext0007" #FOR TESTING
table_name <- "sensor_logs"
#query information
#enddate <- input$dates[2] %>% as.character()
#startdate <- input$dates[1] %>% as.character()
#enddate <- as.character(Sys.Date())
#startdate <- as.POSIXct("2024-06-10",tz = 'UTC')
#connect, define and run query
con <- dbConnect(RPostgres::Postgres(),
dbname = db,
host = host_db,
port = db_port,
user = db_user,
password = db_password)
query <- paste0("SELECT * FROM ",schema_name,".",table_name,";")
result <- dbGetQuery(con, query)
dbDisconnect(con) #disconnect
unique( as.POSIXct(result$DateTime) %>% format("%Y-%m-%d")) %>% length()
library (DBI)
library(dplyr)
#db information:
db <- 'ldess_db'
host_db <- 'localhost'  # e.g., 'ec2-54-83-201-96.compute-1.amazonaws.com'
db_port <- '5432'  # Specify the port (e.g., 5432)
db_user <- 'postgres'
db_password <- 'Maplephone5'
schema_name <- "EXT0007" %>% tolower()
#schema_name <- "ext0007" #FOR TESTING
table_name <- "sensor_logs"
#query information
#enddate <- input$dates[2] %>% as.character()
#startdate <- input$dates[1] %>% as.character()
#enddate <- as.character(Sys.Date())
#startdate <- as.POSIXct("2024-06-10",tz = 'UTC')
#connect, define and run query
con <- dbConnect(RPostgres::Postgres(),
dbname = db,
host = host_db,
port = db_port,
user = db_user,
password = db_password)
query <- paste0("SELECT * FROM ",schema_name,".",table_name,";")
result <- dbGetQuery(con, query)
dbDisconnect(con) #disconnect
unique( as.POSIXct(result$DateTime) %>% format("%Y-%m-%d")) %>% length()
shiny::runApp('directory')
runApp('directory')
